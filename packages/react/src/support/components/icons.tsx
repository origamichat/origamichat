import type React from "react";
import { cn } from "../utils";

export type IconVariant = "default" | "filled";

export type IconName =
	| "sidebar"
	| "command"
	| "check"
	| "x"
	| "clipboard"
	| "send"
	| "chevron-down"
	| "arrow-left"
	| "arrow-right"
	| "star"
	| "arrow-up-right"
	| "chat"
	| "menu";

export interface IconProps {
	name: IconName;
	variant?: IconVariant;
	className?: string;
	filledOnHover?: boolean;
}

// Thanks to Aaon for the icons
const iconRegistry: Record<IconName, Record<IconVariant, string>> = {
	sidebar: {
		default:
			"M9 2L9 22M10 22H14C16.8003 22 18.2004 22 19.27 21.455C20.2108 20.9757 20.9757 20.2108 21.455 19.27C22 18.2004 22 16.8003 22 14V10C22 7.19974 22 5.79961 21.455 4.73005C20.9757 3.78924 20.2108 3.02433 19.27 2.54497C18.2004 2 16.8003 2 14 2H10C7.19974 2 5.79961 2 4.73005 2.54497C3.78924 3.02433 3.02433 3.78924 2.54497 4.73005C2 5.79961 2 7.19974 2 10V14C2 16.8003 2 18.2004 2.54497 19.27C3.02433 20.2108 3.78924 20.9757 4.73005 21.455C5.79961 22 7.19974 22 10 22Z",
		filled:
			"M9.25 2.58333C9.25 2.27334 9.25 2.11835 9.21593 1.99118C9.12346 1.64609 8.85391 1.37654 8.50882 1.28407C8.38165 1.25 8.22666 1.25 7.91667 1.25C6.36671 1.25 5.59174 1.25 4.9559 1.42037C3.23044 1.88271 1.88271 3.23044 1.42037 4.9559C1.25 5.59174 1.25 6.36671 1.25 7.91667V16.0833C1.25 17.6333 1.25 18.4083 1.42037 19.0441C1.88271 20.7696 3.23044 22.1173 4.9559 22.5796C5.59174 22.75 6.36671 22.75 7.91667 22.75C8.22666 22.75 8.38165 22.75 8.50882 22.7159C8.85391 22.6235 9.12346 22.3539 9.21593 22.0088C9.25 21.8817 9.25 21.7267 9.25 21.4167L9.25 2.58333ZM10.75 21.15C10.75 21.7101 10.75 21.9901 10.859 22.204C10.9549 22.3922 11.1078 22.5451 11.296 22.641C11.5099 22.75 11.7899 22.75 12.35 22.75H14.75C17.5503 22.75 18.9504 22.75 20.02 22.205C20.9608 21.7257 21.7257 20.9608 22.205 20.02C22.75 18.9504 22.75 17.5503 22.75 14.75V9.25C22.75 6.44974 22.75 5.04961 22.205 3.98005C21.7257 3.03924 20.9608 2.27433 20.02 1.79497C18.9504 1.25 17.5503 1.25 14.75 1.25H12.35C11.7899 1.25 11.5099 1.25 11.296 1.35899C11.1078 1.45487 10.9549 1.60785 10.859 1.79601C10.75 2.00992 10.75 2.28995 10.75 2.85L10.75 21.15Z",
	},
	command: {
		default:
			"M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3",
		filled:
			"M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3",
	},
	clipboard: {
		default:
			"M15.9999 3V3C18.209 3 19.9999 4.79086 19.9999 7V14C19.9999 16.8003 19.9999 18.2004 19.4549 19.27C18.9755 20.2108 18.2106 20.9757 17.2698 21.455C16.2003 22 14.8001 22 11.9999 22V22C9.19962 22 7.79948 22 6.72993 21.455C5.78911 20.9757 5.02421 20.2108 4.54485 19.27C3.99988 18.2004 3.99988 16.8003 3.99988 14V7C3.99988 4.79086 5.79074 3 7.99988 3V3M15.9999 3V3C15.9999 1.89543 15.1044 1 13.9999 1H9.99988C8.89531 1 7.99988 1.89543 7.99988 3V3M15.9999 3V3C15.9999 4.10457 15.1044 5 13.9999 5H9.99988C8.89531 5 7.99988 4.10457 7.99988 3V3",
		filled:
			"M10.136 0.25C8.85118 0.25 7.70111 1.04698 7.24994 2.25C5.0407 2.25 3.24976 4.04094 3.24976 6.25018V14.75C3.24976 17.5503 3.24976 18.9504 3.79472 20.02C4.27409 20.9608 5.03899 21.7257 5.9798 22.205C7.04936 22.75 8.44949 22.75 11.2498 22.75H12.7498C15.55 22.75 16.9501 22.75 18.0197 22.205C18.9605 21.7257 19.7254 20.9608 20.2048 20.02C20.7498 18.9504 20.7498 17.5503 20.7498 14.75V6.24982C20.7498 4.04078 18.959 2.25 16.7499 2.25C16.2988 1.04699 15.1488 0.25 13.864 0.25H10.136ZM9.99994 4.25C9.30958 4.25 8.74994 3.69036 8.74994 3C8.74994 2.30964 9.30958 1.75 9.99994 1.75H13.9999C14.6903 1.75 15.2499 2.30964 15.2499 3C15.2499 3.69036 14.6903 4.25 13.9999 4.25H9.99994Z",
	},
	chat: {
		default:
			"M2 10C2 7.19974 2 5.79961 2.54497 4.73005C3.02433 3.78924 3.78924 3.02433 4.73005 2.54497C5.79961 2 7.19974 2 10 2H14C16.8003 2 18.2004 2 19.27 2.54497C20.2108 3.02433 20.9757 3.78924 21.455 4.73005C22 5.79961 22 7.19974 22 10V19.1708C22 20.1969 22 20.71 21.8373 21.0302C21.5642 21.5676 20.996 21.8893 20.3947 21.847C20.0363 21.8218 19.5964 21.5578 18.7165 21.0299V21.0299C18.1917 20.715 17.9293 20.5576 17.6542 20.4347C17.1972 20.2306 16.7122 20.0962 16.2154 20.0362C15.9163 20 15.6103 20 14.9983 20H10C7.19974 20 5.79961 20 4.73005 19.455C3.78924 18.9757 3.02433 18.2108 2.54497 17.27C2 16.2004 2 14.8003 2 12V10Z",
		filled:
			"M9.25 1.25C6.44974 1.25 5.04961 1.25 3.98005 1.79497C3.03924 2.27433 2.27433 3.03924 1.79497 3.98005C1.25 5.04961 1.25 6.44974 1.25 9.25V12.75C1.25 15.5503 1.25 16.9504 1.79497 18.02C2.27433 18.9608 3.03924 19.7257 3.98005 20.205C5.04961 20.75 6.44974 20.75 9.25 20.75H14.5764C15.4012 20.75 15.8135 20.75 16.2144 20.8156C16.5703 20.8738 16.9189 20.9703 17.254 21.1035C17.6315 21.2535 17.9851 21.4657 18.6924 21.8901L19.1152 22.1438C20.3049 22.8576 20.8998 23.2145 21.3892 23.1689C21.816 23.1291 22.2054 22.9086 22.4591 22.5631C22.75 22.1669 22.75 21.4732 22.75 20.0858V9.25C22.75 6.44974 22.75 5.04961 22.205 3.98005C21.7257 3.03924 20.9608 2.27433 20.02 1.79497C18.9504 1.25 17.5503 1.25 14.75 1.25H9.25Z",
	},
	check: {
		default: "M4 13L9 18L20 6",
		filled: "M4 13L9 18L20 6",
	},
	x: {
		default: "M6 18L18 6M6 6L18 18",
		filled: "M6 18L18 6M6 6L18 18",
	},
	send: {
		default:
			"M11 13L12.5345 16.9899C13.5893 19.7326 14.1168 21.1039 14.825 21.4489C15.4375 21.7472 16.1598 21.7132 16.7415 21.3586C17.4142 20.9486 17.8104 19.5338 18.6027 16.7041L21.466 6.47824C21.9677 4.68672 22.2185 3.79096 21.9857 3.17628C21.7827 2.64035 21.3596 2.21724 20.8237 2.01427C20.209 1.78147 19.3133 2.03228 17.5217 2.53391L7.29584 5.39716C4.46617 6.18947 3.05133 6.58563 2.64136 7.25828C2.28678 7.84005 2.25275 8.56231 2.55106 9.17484C2.89597 9.88306 4.26729 10.4105 7.00993 11.4654L11 13ZM11 13L13.5 10.5",
		filled:
			"M6.88154 12.2191C3.45325 10.9005 1.7391 10.2412 1.30796 9.35595C0.935078 8.59028 0.977616 7.68746 1.42084 6.96024C1.93331 6.11943 3.70185 5.62424 7.23894 4.63385L17.234 1.83523C19.4734 1.2082 20.5931 0.894684 21.3615 1.18568C22.0314 1.43939 22.5603 1.96829 22.814 2.63819C23.1049 3.40654 22.7914 4.52624 22.1644 6.76565L19.3657 16.7606C18.3753 20.2977 17.88 22.0663 17.0392 22.5788C16.312 23.022 15.4092 23.0645 14.6435 22.6916C13.7582 22.2605 13.099 20.5463 11.7804 17.1179L11.0877 15.3166C10.9525 14.9653 10.885 14.7897 10.8813 14.6151C10.878 14.4608 10.9104 14.3078 10.9761 14.1681C11.0504 14.0101 11.1835 13.877 11.4496 13.6109L13.9999 11.0606C14.2928 10.7677 14.2928 10.2928 13.9999 9.99995C13.7071 9.70705 13.2322 9.70705 12.9393 9.99995L10.3891 12.5501C10.123 12.8163 9.98991 12.9493 9.83189 13.0236C9.69221 13.0893 9.53921 13.1218 9.38489 13.1185C9.2103 13.1148 9.03466 13.0472 8.68338 12.9121L6.88154 12.2191Z",
	},
	"chevron-down": {
		default: "M6 9L12 15L18 9",
		filled:
			"M10.8686 14.8686L7.73137 11.7314C6.87462 10.8746 6.44624 10.4462 6.4173 10.0785C6.39218 9.75934 6.52136 9.44749 6.76477 9.23959C7.04529 9 7.65111 9 8.86274 9H15.1373C16.3489 9 16.9547 9 17.2352 9.23959C17.4786 9.44749 17.6078 9.75934 17.5827 10.0785C17.5538 10.4462 17.1254 10.8746 16.2686 11.7314L13.1314 14.8686C12.7354 15.2646 12.5373 15.4627 12.309 15.5368C12.1082 15.6021 11.8918 15.6021 11.691 15.5368C11.4627 15.4627 11.2646 15.2646 10.8686 14.8686Z",
	},
	"arrow-left": {
		default: "M15 19l-7-7 7-7",
		filled: "M15 19l-7-7 7-7",
	},
	"arrow-right": {
		default: "M9 5l7 7-7 7",
		filled: "M9 5l7 7-7 7",
	},
	"arrow-up-right": {
		default: "M15 19l-7-7 7-7",
		filled: "M15 19l-7-7 7-7",
	},
	menu: {
		default: "M3 6H21M3 12H21M3 18H21",
		filled: "M3 6H21M3 12H21M3 18H21",
	},
	star: {
		default:
			"M9.13784 4.72433C10.0591 2.8819 10.5197 1.96069 11.143 1.66508C11.6854 1.40782 12.3146 1.40782 12.8571 1.66508C13.4804 1.96069 13.941 2.88191 14.8622 4.72434L15.2215 5.4429C15.5059 6.01177 15.6481 6.29621 15.8562 6.51399C16.0403 6.70676 16.2612 6.86077 16.5058 6.96694C16.782 7.08689 17.0981 7.12201 17.7302 7.19225L18.0564 7.22849C20.2646 7.47385 21.3687 7.59653 21.8677 8.10561C22.3013 8.54802 22.5055 9.16639 22.4205 9.78001C22.3227 10.4861 21.5086 11.242 19.8805 12.7539L19.5361 13.0736C18.9804 13.5897 18.7025 13.8477 18.5419 14.1604C18.4 14.4368 18.3244 14.7424 18.3211 15.0531C18.3174 15.4046 18.4446 15.7671 18.699 16.4921V16.4921C19.5294 18.8587 19.9446 20.042 19.673 20.7338C19.4374 21.3339 18.927 21.7836 18.3021 21.9418C17.5816 22.1241 16.4767 21.5717 14.267 20.4668L13.4311 20.0489C12.9064 19.7865 12.644 19.6553 12.3688 19.6037C12.1251 19.558 11.8749 19.558 11.6312 19.6037C11.356 19.6553 11.0937 19.7865 10.5689 20.0489L9.73299 20.4668C7.52325 21.5717 6.41838 22.1241 5.69791 21.9418C5.07298 21.7836 4.56261 21.3339 4.32703 20.7338C4.05543 20.042 4.47062 18.8587 5.30101 16.4921V16.4921C5.55541 15.7671 5.68261 15.4046 5.67891 15.0531C5.67565 14.7424 5.60005 14.4368 5.45811 14.1604C5.29751 13.8477 5.01964 13.5897 4.46388 13.0736L4.11954 12.7539C2.49141 11.242 1.67734 10.4861 1.57953 9.78001C1.49453 9.16639 1.69867 8.54802 2.13229 8.10561C2.63127 7.59653 3.73538 7.47385 5.9436 7.22849L6.26976 7.19225C6.90189 7.12201 7.21795 7.08689 7.49423 6.96694C7.73879 6.86077 7.95965 6.70676 8.14383 6.51399C8.35189 6.29621 8.49411 6.01178 8.77855 5.44291L9.13784 4.72433Z",
		filled:
			"M15.5621 4.44717C14.4311 2.18515 13.8656 1.05414 13.126 0.681032C12.4179 0.323799 11.5822 0.323799 10.874 0.68103C10.1344 1.05413 9.56892 2.18515 8.43791 4.44718C8.13099 5.061 7.97754 5.36791 7.76834 5.60789C7.49876 5.91713 7.15723 6.15528 6.77386 6.30133C6.47635 6.41467 6.14153 6.45187 5.47188 6.52628C3.13977 6.7854 1.97372 6.91496 1.39896 7.38946C0.657283 8.00176 0.332614 8.98524 0.563974 9.91876C0.743268 10.6422 1.61602 11.4526 3.36154 13.0734C3.90529 13.5784 4.17717 13.8308 4.35485 14.1182C4.62987 14.563 4.75847 15.0829 4.72253 15.6047C4.69931 15.9418 4.57828 16.2867 4.33623 16.9765C3.54952 19.2187 3.15617 20.3397 3.30443 21.0286C3.53549 22.1021 4.4401 22.8992 5.53423 22.9933C6.23626 23.0537 7.29889 22.5224 9.42416 21.4598L10.2112 21.0663C10.8671 20.7383 11.195 20.5743 11.539 20.5098C11.8437 20.4526 12.1564 20.4526 12.461 20.5098C12.805 20.5743 13.133 20.7383 13.7889 21.0663L14.5759 21.4598C16.7012 22.5224 17.7638 23.0537 18.4658 22.9933C19.5599 22.8992 20.4646 22.1021 20.6956 21.0286C20.8439 20.3397 20.4505 19.2187 19.6638 16.9765C19.4218 16.2867 19.3007 15.9418 19.2775 15.6047C19.2416 15.0829 19.3702 14.563 19.6452 14.1182C19.8229 13.8308 20.0948 13.5784 20.6385 13.0734C22.384 11.4526 23.2568 10.6422 23.4361 9.91876C23.6674 8.98524 23.3428 8.00176 22.6011 7.38946C22.0263 6.91496 20.8603 6.7854 18.5282 6.52628C17.8585 6.45187 17.5237 6.41467 17.2262 6.30133C16.8428 6.15528 16.5013 5.91713 16.2317 5.60789C16.0225 5.36791 15.8691 5.061 15.5621 4.44717Z",
	},
};

const getIconPath = (name: IconName, variant: IconVariant): string => {
	return iconRegistry[name]?.[variant] || iconRegistry[name]?.default || "";
};

const getIconType = (variant: IconVariant) => {
	return variant === "filled" ? "filled" : "stroked";
};

export const Icon: React.FC<IconProps> = ({
	name,
	variant = "default",
	className,
	filledOnHover,
}) => {
	const defaultPath = getIconPath(name, "default");
	const filledPath = getIconPath(name, "filled");
	const currentPath = getIconPath(name, variant);
	const iconType = getIconType(variant);

	if (!currentPath) {
		console.warn(`Icon "${name}" with variant "${variant}" not found`);
		return null;
	}

	// If filledOnHover is true, render both variants with conditional visibility
	if (filledOnHover && defaultPath && filledPath) {
		return (
			<svg
				className={cn("size-4", className)}
				fill="none"
				height="24"
				viewBox="0 0 24 24"
				width="24"
				xmlns="http://www.w3.org/2000/svg"
			>
				<title>{name}</title>
				{/* Default variant - hidden on group hover */}
				<path
					className="transition-opacity duration-200 group-hover/btn:opacity-0"
					d={defaultPath}
					stroke="currentColor"
					strokeLinecap="round"
					strokeLinejoin="round"
					strokeWidth="1.5"
				/>
				{/* Filled variant - shown on group hover */}
				<path
					className="opacity-0 transition-opacity duration-200 group-hover/btn:opacity-100"
					clipRule="evenodd"
					d={filledPath}
					fill="currentColor"
					fillRule="evenodd"
				/>
			</svg>
		);
	}

	// Standard rendering for non-hover variants
	return (
		<svg
			className={cn("size-4", className)}
			fill="none"
			height="24"
			viewBox="0 0 24 24"
			width="24"
			xmlns="http://www.w3.org/2000/svg"
		>
			<title>{name}</title>
			{iconType === "filled" ? (
				<path
					clipRule="evenodd"
					d={currentPath}
					fill="currentColor"
					fillRule="evenodd"
				/>
			) : (
				<path
					d={currentPath}
					stroke="currentColor"
					strokeLinecap="round"
					strokeLinejoin="round"
					strokeWidth="1.5"
				/>
			)}
		</svg>
	);
};

export type AddNewIconTemplate = {
	[key: string]: {
		default: string;
		filled: string;
	};
};

export default Icon;
